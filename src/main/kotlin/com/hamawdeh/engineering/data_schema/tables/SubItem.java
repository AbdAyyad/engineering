/*
 * This file is generated by jOOQ.
 */
package com.hamawdeh.engineering.data_schema.tables;


import com.hamawdeh.engineering.data_schema.Keys;
import com.hamawdeh.engineering.data_schema.Public;
import com.hamawdeh.engineering.data_schema.tables.records.SubItemRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SubItem extends TableImpl<SubItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sub_item</code>
     */
    public static final SubItem SUB_ITEM = new SubItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubItemRecord> getRecordType() {
        return SubItemRecord.class;
    }

    /**
     * The column <code>public.sub_item.id</code>.
     */
    public final TableField<SubItemRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.sub_item.item_id</code>.
     */
    public final TableField<SubItemRecord, Integer> ITEM_ID = createField(DSL.name("item_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.sub_item.description</code>.
     */
    public final TableField<SubItemRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.sub_item.code</code>.
     */
    public final TableField<SubItemRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(4).nullable(false), this, "");

    /**
     * The column <code>public.sub_item.created</code>.
     */
    public final TableField<SubItemRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private SubItem(Name alias, Table<SubItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private SubItem(Name alias, Table<SubItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.sub_item</code> table reference
     */
    public SubItem(String alias) {
        this(DSL.name(alias), SUB_ITEM);
    }

    /**
     * Create an aliased <code>public.sub_item</code> table reference
     */
    public SubItem(Name alias) {
        this(alias, SUB_ITEM);
    }

    /**
     * Create a <code>public.sub_item</code> table reference
     */
    public SubItem() {
        this(DSL.name("sub_item"), null);
    }

    public <O extends Record> SubItem(Table<O> child, ForeignKey<O, SubItemRecord> key) {
        super(child, key, SUB_ITEM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<SubItemRecord, Integer> getIdentity() {
        return (Identity<SubItemRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SubItemRecord> getPrimaryKey() {
        return Keys.SUB_ITEM_PKEY;
    }

    @Override
    public List<UniqueKey<SubItemRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SUB_ITEM_CODE_KEY);
    }

    @Override
    public List<ForeignKey<SubItemRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SUB_ITEM__FK_ITEM_ID);
    }

    private transient Item _item;

    public Item item() {
        if (_item == null)
            _item = new Item(this, Keys.SUB_ITEM__FK_ITEM_ID);

        return _item;
    }

    @Override
    public SubItem as(String alias) {
        return new SubItem(DSL.name(alias), this);
    }

    @Override
    public SubItem as(Name alias) {
        return new SubItem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SubItem rename(String name) {
        return new SubItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SubItem rename(Name name) {
        return new SubItem(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, String, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}

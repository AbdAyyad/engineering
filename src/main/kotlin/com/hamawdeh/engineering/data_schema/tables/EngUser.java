/*
 * This file is generated by jOOQ.
 */
package com.hamawdeh.engineering.data_schema.tables;


import com.hamawdeh.engineering.data_schema.Keys;
import com.hamawdeh.engineering.data_schema.Public;
import com.hamawdeh.engineering.data_schema.tables.records.EngUserRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EngUser extends TableImpl<EngUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.eng_user</code>
     */
    public static final EngUser ENG_USER = new EngUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EngUserRecord> getRecordType() {
        return EngUserRecord.class;
    }

    /**
     * The column <code>public.eng_user.id</code>.
     */
    public final TableField<EngUserRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.eng_user.user_name</code>.
     */
    public final TableField<EngUserRecord, String> USER_NAME = createField(DSL.name("user_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.eng_user.password</code>.
     */
    public final TableField<EngUserRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>public.eng_user.created</code>.
     */
    public final TableField<EngUserRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.eng_user.privilege</code>.
     */
    public final TableField<EngUserRecord, Integer> PRIVILEGE = createField(DSL.name("privilege"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "");

    private EngUser(Name alias, Table<EngUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private EngUser(Name alias, Table<EngUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.eng_user</code> table reference
     */
    public EngUser(String alias) {
        this(DSL.name(alias), ENG_USER);
    }

    /**
     * Create an aliased <code>public.eng_user</code> table reference
     */
    public EngUser(Name alias) {
        this(alias, ENG_USER);
    }

    /**
     * Create a <code>public.eng_user</code> table reference
     */
    public EngUser() {
        this(DSL.name("eng_user"), null);
    }

    public <O extends Record> EngUser(Table<O> child, ForeignKey<O, EngUserRecord> key) {
        super(child, key, ENG_USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<EngUserRecord, Integer> getIdentity() {
        return (Identity<EngUserRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<EngUserRecord> getPrimaryKey() {
        return Keys.ENG_USER_PKEY;
    }

    @Override
    public List<UniqueKey<EngUserRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ENG_USER_USER_NAME_KEY);
    }

    @Override
    public EngUser as(String alias) {
        return new EngUser(DSL.name(alias), this);
    }

    @Override
    public EngUser as(Name alias) {
        return new EngUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EngUser rename(String name) {
        return new EngUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EngUser rename(Name name) {
        return new EngUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, LocalDateTime, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}

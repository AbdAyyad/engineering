/*
 * This file is generated by jOOQ.
 */
package com.hamawdeh.engineering.data_schema.tables;


import com.hamawdeh.engineering.data_schema.Keys;
import com.hamawdeh.engineering.data_schema.Public;
import com.hamawdeh.engineering.data_schema.tables.records.OrderTypeRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrderType extends TableImpl<OrderTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.order_type</code>
     */
    public static final OrderType ORDER_TYPE = new OrderType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderTypeRecord> getRecordType() {
        return OrderTypeRecord.class;
    }

    /**
     * The column <code>public.order_type.id</code>.
     */
    public final TableField<OrderTypeRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.order_type.code</code>.
     */
    public final TableField<OrderTypeRecord, Integer> CODE = createField(DSL.name("code"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.order_type.description</code>.
     */
    public final TableField<OrderTypeRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.order_type.created</code>.
     */
    public final TableField<OrderTypeRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private OrderType(Name alias, Table<OrderTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrderType(Name alias, Table<OrderTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.order_type</code> table reference
     */
    public OrderType(String alias) {
        this(DSL.name(alias), ORDER_TYPE);
    }

    /**
     * Create an aliased <code>public.order_type</code> table reference
     */
    public OrderType(Name alias) {
        this(alias, ORDER_TYPE);
    }

    /**
     * Create a <code>public.order_type</code> table reference
     */
    public OrderType() {
        this(DSL.name("order_type"), null);
    }

    public <O extends Record> OrderType(Table<O> child, ForeignKey<O, OrderTypeRecord> key) {
        super(child, key, ORDER_TYPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<OrderTypeRecord, Integer> getIdentity() {
        return (Identity<OrderTypeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OrderTypeRecord> getPrimaryKey() {
        return Keys.ORDER_TYPE_PKEY;
    }

    @Override
    public List<UniqueKey<OrderTypeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ORDER_TYPE_CODE_KEY);
    }

    @Override
    public OrderType as(String alias) {
        return new OrderType(DSL.name(alias), this);
    }

    @Override
    public OrderType as(Name alias) {
        return new OrderType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderType rename(String name) {
        return new OrderType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderType rename(Name name) {
        return new OrderType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
